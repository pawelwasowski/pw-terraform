name: One Branch Workload
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
env:
  TERRAFORM_VERSION: 1.0.7
  AWS_ROLE_ARN_DEV: arn:aws:iam::718665970908:role/pw-dev-terraform-state-manager
  AWS_ROLE_ARN_PROD: arn:aws:iam::416419186814:role/pw-dev-terraform-state-manager
jobs:
  TerraformPlanDev:
    name: Plan tfm DEV
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Configure AWS
        run: |
          export AWS_ROLE_ARN=$AWS_ROLE_ARN_DEV
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=eu-central-1

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - uses: actions/checkout@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform init
        id: init
        run: |
          terraform version
          terraform init
          bash scripts/init-workspace.sh dev
          terraform workspace select dev

      - name: Terraform plan
        id: plan
        run: |
          terraform plan -var-file=tfvars/dev.tfvars -input=false -no-color -out plan-file
        continue-on-error: true

      - name: Save Terraform Plan as PR Comment
        uses: actions-ecosystem/action-create-comment@v1
        if: github.event_name == 'pull_request'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ${{ steps.plan.outputs.stdout }}

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Prepare artifact
        run: |
          tar cf plan-dev.tar plan-file .terraform

      - name: Upload artifact
        if: github.event.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          name: plan-dev.tar
          path: plan-dev.tar


  TerraformApplyDev:
    name: Apply tfm DEV
    if: github.event.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [TerraformPlanDev]
    environment: 'dev'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS
        run: |
          export AWS_ROLE_ARN=arn:aws:iam::718665970908:role/pw-dev-terraform-state-manager
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=eu-central-1

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: plan-dev.tar

      - name: Unzip artifact
        run: |
          tar xf plan-dev.tar

      - name: Terraform init
        id: init
        run: |
          terraform version
          terraform init

      - name: Terraform apply
        run: |
          terraform apply -auto-approve -no-color -input=false plan-file

  TerraformPlanProd:
    name: Plan tfm PROD
    runs-on: ubuntu-latest
    needs: [TerraformApplyDev]
    environment: 'prod'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Configure AWS
        run: |
          export AWS_ROLE_ARN=arn:aws:iam::416419186814:role/pv-prod-terraform-deployer
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=eu-central-1

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
      - run: aws sts get-caller-identity
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - uses: actions/checkout@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform init
        id: init
        run: |
          terraform version
          terraform init
          bash scripts/init-workspace.sh prod
          terraform workspace select prod

      - name: Terraform plan
        id: plan
        run: |
          terraform plan -var-file=tfvars/prod.tfvars -input=false -no-color -out plan-file

      - name: Prepare artifact
        run: |
          tar cf plan-prod.tar plan-file .terraform

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: plan-prod.tar
          path: plan-prod.tar

  TerraformApplyProd:
    name: Apply tfm PROD
    needs: [TerraformPlanProd]
    environment: 'prod'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS
        run: |
          export AWS_ROLE_ARN=arn:aws:iam::416419186814:role/pv-prod-terraform-state-manager
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=eu-central-1

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: plan-prod.tar

      - name: Unzip artifact
        run: |
          tar xf plan-prod.tar

      - name: Terraform init
        id: init
        run: |
          terraform version
          terraform init

      - name: Terraform apply
        run: |
          terraform apply -auto-approve -no-color -input=false plan-file


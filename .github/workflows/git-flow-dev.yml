name: Git Flow DEV Workload
on:
  pull_request:
    branches:
      - dev
  push:
    branches:
      - dev
env:
  TERRAFORM_VERSION: 1.0.8
  AWS_ROLE_ARN: arn:aws:iam::718665970908:role/pw-dev-terraform-state-manager
  AWS_S3_ARTIFACTS_BUCKET_NAME: pw-dev-terraform-github-artifacts
  AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/awscreds
  AWS_DEFAULT_REGION: eu-central-1
jobs:
  TerraformPlanDev:
    name: Plan tfm DEV
    runs-on: ubuntu-latest
    environment: 'dev'
    concurrency:
      group: dev-workload
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Configure AWS
        run: |
          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - uses: actions/checkout@v2

      - name: Copy Dev Terraform Backend config
        run: cp ./backends/remote-backend-config-dev.tf .

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform init
        id: init
        run: |
          terraform version
          terraform init
          bash scripts/init-workspace.sh dev
          terraform workspace select dev

      - name: Terraform plan
        id: plan
        run: |
          terraform plan -var-file=tfvars/dev.tfvars -input=false -no-color -out plan-file
        continue-on-error: true

      - name: Save Terraform Plan as PR Comment
        uses: actions-ecosystem/action-create-comment@v1
        if: github.event_name == 'pull_request'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ${{ steps.plan.outputs.stdout }}

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Prepare artifact
        run: |
          tar cf plan-dev.tar plan-file .terraform

      - name: Upload artifact
        if: github.event.ref == 'refs/heads/dev' && github.event_name == 'push'
        run: |
          export GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          echo $GIT_HASH
          aws s3 cp plan-dev.tar s3://$AWS_S3_ARTIFACTS_BUCKET_NAME/$GIT_HASH/plan-dev.tar --no-progress

  TerraformApplyDev:
    name: Apply tfm DEV
    if: github.event.ref == 'refs/heads/dev' && github.event_name == 'push'
    needs: [TerraformPlanDev]
    environment: 'dev'
    concurrency:
      group: dev-workload
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS
        run: |
          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - uses: actions/checkout@v2

      - name: Copy Dev Terraform Backend config
        run: cp ./backends/remote-backend-config-dev.tf .

      - name: Download Artifact
        run: |
          export GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          echo $GIT_HASH
          aws s3 cp s3://$AWS_S3_ARTIFACTS_BUCKET_NAME/$GIT_HASH/plan-dev.tar  plan-dev.tar --no-progress

      - name: Unzip artifact
        run: |
          tar xf plan-dev.tar

      - name: Terraform init
        id: init
        run: |
          terraform version
          terraform init

      - name: Terraform apply
        run: |
          terraform apply -auto-approve -no-color -input=false plan-file



